let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <silent> <F11> :NERDTreeToggle
imap <S-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .i
map! <S-Insert> *
inoremap <silent> <S-Tab> =BackwardsSnippet()
imap <C-F6> :copeni
imap <F9> :emenu Encoding.	
imap <silent> <F12> :TlistToggle
map  :GSW
snoremap <silent> 	 i<Right>=TriggerSnippet()
nmap <silent>  
snoremap  b<BS>
snoremap % b<BS>%
snoremap ' b<BS>'
noremap <silent> ,u :sil s/^\V=escape(b:comment_leader,'\/')//e:noh
noremap <silent> ,c :sil s/^/=escape(b:comment_leader,'\/')/:noh
vmap / /=GetVisual()
nmap ; :%s/\<=expand("<cword>")\>/
vmap ; :%s/=GetVisual()//<Left>
map F :GS
map Q gq
snoremap U b<BS>U
nnoremap W :retab!
nmap <silent> \c <Plug>Traditionalj
nmap <silent> \x <Plug>Traditional
vmap <silent> \c <Plug>VisualTraditionalj
vmap <silent> \x <Plug>VisualTraditional
map \mbe <Plug>MiniBufExplorer
map \mbc <Plug>CMiniBufExplorer
map \mbu <Plug>UMiniBufExplorer
map \mbt <Plug>TMiniBufExplorer
snoremap \ b<BS>\
nmap \sh <Plug>DBHistory
nmap \slv <Plug>DBListView
nmap \slp <Plug>DBListProcedure
nmap \slt <Plug>DBListTable
vmap <silent> \slc :exec 'DBListColumn '.DB_getVisualBlock()
nmap \slc <Plug>DBListColumn
nmap \sbp <Plug>DBPromptForBufferParameters
nmap \sdpa <Plug>DBDescribeProcedureAskName
vmap <silent> \sdp :exec 'DBDescribeProcedure '.DB_getVisualBlock()
nmap \sdp <Plug>DBDescribeProcedure
nmap \sdta <Plug>DBDescribeTableAskName
vmap <silent> \sdt :exec 'DBDescribeTable '.DB_getVisualBlock()
nmap \sdt <Plug>DBDescribeTable
nmap \sta <Plug>DBSelectFromTableAskName
nmap \stw <Plug>DBSelectFromTableWithWhere
vmap <silent> \st :exec 'DBSelectFromTable '.DB_getVisualBlock()
nmap \st <Plug>DBSelectFromTable
nmap <silent> \sel :.,.DBExecRangeSQL
nmap <silent> \sea :1,$DBExecRangeSQL
nmap \se <Plug>DBExecSQLUnderCursor
vmap \se <Plug>DBExecVisualSQL
nmap \ihn :IHN
nmap \is :IHS:A
nmap \ih :IHS
nnoremap <silent> \gt :ExgsStackToggle
nnoremap <silent> \gq :ExgsQuickViewToggle
nnoremap <silent> \gs :ExgsSelectToggle
snoremap ^ b<BS>^
snoremap ` b<BS>`
nmap gx <Plug>NetrwBrowseX
nmap <silent> <F11> :NERDTreeToggle
nmap <S-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
noremap <Plug>Comment :call EnhancedCommentify('', 'comment')
noremap <Plug>DeComment :call EnhancedCommentify('', 'decomment')
noremap <Plug>Traditional :call EnhancedCommentify('', 'guess')
noremap <Plug>FirstLine :call EnhancedCommentify('', 'first')
noremap <Plug>VisualComment :call EnhancedCommentify('', 'comment',   line("'<"), line("'>"))
noremap <Plug>VisualDeComment :call EnhancedCommentify('', 'decomment',   line("'<"), line("'>"))
noremap <Plug>VisualTraditional :call EnhancedCommentify('', 'guess',   line("'<"), line("'>"))
noremap <Plug>VisualFirstLine :call EnhancedCommentify('', 'first',   line("'<"), line("'>"))
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetBrowseX(expand("<cWORD>"),0)
vmap <C-F6> :copen
nmap <C-F6> :copen
map <F5> :make %:r:cw
nmap <S-F10> :emenu Spell.	
nmap <S-F9> :emenu Encoding.End_line_format.	
vmap <F9> :emenu Encoding.	
nmap <F9> :emenu Encoding.	
nnoremap <silent> <S-F5> :ExgsToggle
nmap <silent> <F3> <Plug>ToggleProject
nmap <silent> <F12> :TlistToggle
inoremap <silent> 	 =TriggerSnippet()
inoremap <silent> 	 =ShowAvailableSnips()
map Ï :Project:redraw/
map Ð :Project
imap <silent> \c <Plug>Traditionalji
imap <silent> \x <Plug>Traditional
imap \ihn :IHN
imap \is :IHS:A
imap \ih :IHS
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set background=dark
set backspace=2
set completeopt=
set noequalalways
set expandtab
set guifont=Monospace\ 9
set guioptions=aegit
set helplang=ru
set hlsearch
set iminsert=0
set incsearch
set isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=,:
set laststatus=2
set mouse=a
set mousemodel=popup
set ruler
set shiftround
set shiftwidth=4
set showcmd
set showmatch
set smartcase
set smartindent
set spelllang=
set suffixes=.bak,~,.o,.h,.info,.swp,.obj,.info,.aux,.log,.dvi,.bbl,.out,.o,.lo
set tabstop=4
set tags=.
set wildcharm=<Tab>
set wildmenu
set window=49
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 Application.pm
badd +68 Core/Config.pm
badd +1 Core/Registry.pm
badd +252 Core/Exception.pm
badd +147 Core/Router.pm
badd +13 ~/projects/atma/base/lib/Application/Controller/Default.pm
badd +1 Core/Driver/Loader.pm
badd +27 Core/Driver/Types.pm
badd +27 ~/projects/atma/base/lib/Application/Controller/_Error.pm
badd +201 Driver/DB/Generic.pm
badd +23 Driver/DB/PostgreSQL.pm
badd +1 Driver/DB/Exceptions.pm
silent! argdel *
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
enew
file -MiniBufExplorer-
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> 	 :call search('\[[0-9]*:[^\]]*\]'):<BS>
nnoremap <buffer> j gj
nnoremap <buffer> k gk
nnoremap <buffer> p :wincmd p:<BS>
nnoremap <buffer> <S-Tab> :call search('\[[0-9]*:[^\]]*\]','b'):<BS>
nnoremap <buffer> <Up> gk
nnoremap <buffer> <Down> gj
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal autoindent
setlocal autoread
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=delete
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != ''
setlocal filetype=
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=syntax
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal wrap
setlocal wrapmargin=0
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . s:sx
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
